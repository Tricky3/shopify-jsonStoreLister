<script type="text/javascript">
var theremoteJsonRetailppl = {};
$.ajax({
	url: "{{ 'retailers_data.json' | asset_url }}",
	async: false,
	dataType: 'json',
	success: function(data) {
		theremoteJsonRetailppl = data;
	}
});

//JSON all states, don't really need the state's name but at least I can cross-reference easily.
var usStates = [
    { state: 'ALABAMA', abbreviation: 'AL'},
    { state: 'ALASKA', abbreviation: 'AK'},
    /*{ state: 'AMERICAN SAMOA', abbreviation: 'AS'},*/
    { state: 'ARIZONA', abbreviation: 'AZ'},
    { state: 'ARKANSAS', abbreviation: 'AR'},
    { state: 'CALIFORNIA', abbreviation: 'CA'},
    { state: 'COLORADO', abbreviation: 'CO'},
    { state: 'CONNECTICUT', abbreviation: 'CT'},
    { state: 'DELAWARE', abbreviation: 'DE'},
    { state: 'DISTRICT OF COLUMBIA', abbreviation: 'DC'},
    /*{ state: 'FEDERATED STATES OF MICRONESIA', abbreviation: 'FM'},*/
    { state: 'FLORIDA', abbreviation: 'FL'},
    { state: 'GEORGIA', abbreviation: 'GA'},
    /*{ state: 'GUAM', abbreviation: 'GU'},*/
    { state: 'HAWAII', abbreviation: 'HI'},
    { state: 'IDAHO', abbreviation: 'ID'},
    { state: 'ILLINOIS', abbreviation: 'IL'},
    { state: 'INDIANA', abbreviation: 'IN'},
    { state: 'IOWA', abbreviation: 'IA'},
    { state: 'KANSAS', abbreviation: 'KS'},
    { state: 'KENTUCKY', abbreviation: 'KY'},
    { state: 'LOUISIANA', abbreviation: 'LA'},
    { state: 'MAINE', abbreviation: 'ME'},
    /*{ state: 'MARSHALL ISLANDS', abbreviation: 'MH'},*/
    { state: 'MARYLAND', abbreviation: 'MD'},
    { state: 'MASSACHUSETTS', abbreviation: 'MA'},
    { state: 'MICHIGAN', abbreviation: 'MI'},
    { state: 'MINNESOTA', abbreviation: 'MN'},
    { state: 'MISSISSIPPI', abbreviation: 'MS'},
    { state: 'MISSOURI', abbreviation: 'MO'},
    { state: 'MONTANA', abbreviation: 'MT'},
    { state: 'NEBRASKA', abbreviation: 'NE'},
    { state: 'NEVADA', abbreviation: 'NV'},
    { state: 'NEW HAMPSHIRE', abbreviation: 'NH'},
    { state: 'NEW JERSEY', abbreviation: 'NJ'},
    { state: 'NEW MEXICO', abbreviation: 'NM'},
    { state: 'NEW YORK', abbreviation: 'NY'},
    { state: 'NORTH CAROLINA', abbreviation: 'NC'},
    { state: 'NORTH DAKOTA', abbreviation: 'ND'},
    /*{ state: 'NORTHERN MARIANA ISLANDS', abbreviation: 'MP'},*/
    { state: 'OHIO', abbreviation: 'OH'},
    { state: 'OKLAHOMA', abbreviation: 'OK'},
    { state: 'OREGON', abbreviation: 'OR'},
    /*{ state: 'PALAU', abbreviation: 'PW'},*/
    { state: 'PENNSYLVANIA', abbreviation: 'PA'},
    /*{ state: 'PUERTO RICO', abbreviation: 'PR'},*/
    { state: 'RHODE ISLAND', abbreviation: 'RI'},
    { state: 'SOUTH CAROLINA', abbreviation: 'SC'},
    { state: 'SOUTH DAKOTA', abbreviation: 'SD'},
    { state: 'TENNESSEE', abbreviation: 'TN'},
    { state: 'TEXAS', abbreviation: 'TX'},
    { state: 'UTAH', abbreviation: 'UT'},
    { state: 'VERMONT', abbreviation: 'VT'},
    /*{ state: 'VIRGIN ISLANDS', abbreviation: 'VI'},*/
    { state: 'VIRGINIA', abbreviation: 'VA'},
    { state: 'WASHINGTON', abbreviation: 'WA'},
    { state: 'WEST VIRGINIA', abbreviation: 'WV'},
    { state: 'WISCONSIN', abbreviation: 'WI'},
    { state: 'WYOMING', abbreviation: 'WY' }
];

//Get the actual retailers data in
var data={"retailers":theremoteJsonRetailppl}, output = "", stateLiteral = "", outsideUS = "", physicalStore = "", featured = "", domRemoval = "", articleClass="";
//console.log(data);

/* =================== Logik :: Cause-and-effect ================================*/

//return an array of objects according to key, value, or key and value matching
function getObjects(obj, key, val) {
    var objects = [];
    for (var i in obj) {
        if (!obj.hasOwnProperty(i)) continue;
        if (typeof obj[i] == 'object') {
            objects = objects.concat(getObjects(obj[i], key, val));    
        } else 
        //if key matches and value matches or if key matches and value is not passed (eliminating the case where key matches but passed value does not)
        if (i == key && obj[i] == val || i == key && val == '') { //
            objects.push(obj);
        } else if (obj[i] == val && key == ''){
            //only add if the object is not already in the array
            if (objects.lastIndexOf(obj) == -1){
                objects.push(obj);
            }
        }
    }
    return objects;
}

//return an array of values that match on a certain key
function getValues(obj, key) {
    var objects = [];
    for (var i in obj) {
        if (!obj.hasOwnProperty(i)) continue;
        if (typeof obj[i] == 'object') {
            objects = objects.concat(getValues(obj[i], key));
        } else if (i == key) {
            objects.push(obj[i]);
        }
    }
    return objects;
}

function onlyUnique(value, index, self) { 
    return self.indexOf(value) === index;
}

function cleanArray(actual){
  var newArray = new Array();
  for(var i = 0; i<actual.length; i++){
      if (actual[i]){
        newArray.push(actual[i]);
    }
  }
  return newArray;
}

function replaceState(stateString) {
  switch (stateString) {
    		case "AL":
    			stateLiteral = "Alabama";
    			outsideUS=false;
    			physicalStore=true;
    			featured = false;
				break;
			case "AK":
				stateLiteral = "Alaska";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "AZ":
				stateLiteral = "Arizona";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "AR":
				stateLiteral = "Arkansas";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "CA":
				stateLiteral = "California";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "CO":
				stateLiteral = "Colorado";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "CT":
				stateLiteral = "Connecticut";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "DE":
				stateLiteral = "Delaware";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "DC":
				stateLiteral = "District Of Columbia";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "FL":
				stateLiteral = "Florida";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "GA":
				stateLiteral = "Georgia";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "HI":
				stateLiteral = "Hawaii";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "ID":
				stateLiteral = "Idaho";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "IL":
				stateLiteral = "Illinois";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "IN":
				stateLiteral = "Indiana";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "IA":
				stateLiteral = "Iowa";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "KS":
				stateLiteral = "Kansas";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "KY":
				stateLiteral = "Kentucky";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "LA":
				stateLiteral = "Louisiana";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "ME":
				stateLiteral = "Maine";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "MD":
				stateLiteral = "Maryland";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "MA":
				stateLiteral = "Massachusetts";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "MI":
				stateLiteral = "Michigan";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "MN":
				stateLiteral = "Minnesota";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "MS":
				stateLiteral = "Mississippi";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "MO":
				stateLiteral = "Missouri";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "MT":
				stateLiteral = "Montana";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "NE":
				stateLiteral = "Nebraska";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "NV":
				stateLiteral = "Nevada";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "NH":
				stateLiteral = "New Hampshire";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "NJ":
				stateLiteral = "New Jersey";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "NM":
				stateLiteral = "New Mexico";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "NY":
				stateLiteral = "New York";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "NC":
				stateLiteral = "North Carolina";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "ND":
				stateLiteral = "North Dakota";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "OH":
				stateLiteral = "Ohio";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "OK":
				stateLiteral = "Oklahoma";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "OR":
				stateLiteral = "Oregon";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "PA":
				stateLiteral = "Pennsylvania";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "RI":
				stateLiteral = "Rhode Island";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "SC":
				stateLiteral = "South Carolina";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "SD":
				stateLiteral = "South Dakota";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "TN":
				stateLiteral = "Tennessee";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "TX":
				stateLiteral = "Texas";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "UT":
				stateLiteral = "Utah";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "VT":
				stateLiteral = "Vermont";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "VA":
				stateLiteral = "Virginia";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "WA":
				stateLiteral = "Washington";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "WV":
				stateLiteral = "West Virginia";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "WI":
				stateLiteral = "Wisconsin";
				outsideUS=false;
				physicalStore=true;
				featured = false;
				break;
			case "WY":
				stateLiteral = "Wyoming";
				outsideUS=false;
				physicalStore=true;
				featured = false;
			break;
			case "ONLINE":
				stateLiteral = "ONLINE";
				outsideUS=true;
				physicalStore=false;
				featured = false;
			break;
			case "SPECIAL":
				stateLiteral = "SPECIAL";
				outsideUS=true;
				physicalStore=false;
				featured = true;
			break;
    		default:
    		    stateLiteral = stateString;
    		    outsideUS=true;
    		    physicalStore=true;
    		    featured = false;
		}
}

function getIntersect(arr1, arr2) {
    var r = [], o = {}, l = arr2.length, i, v;
    for (i = 0; i < l; i++) {
        o[arr2[i]] = true;
    }
    l = arr1.length;
    for (i = 0; i < l; i++) {
        v = arr1[i];
        //get the stateliteral in
        replaceState(v);
        if (v in o) {
        	//mark the intersection
            r.push({'state':v,'intersected':'yes','stateLiteral':stateLiteral});
        }
        else {
        	//mark the unique values so we can "neutralize" them later on
            r.push({'state':v,'intersected':'no','stateLiteral':stateLiteral});
        }
    }
    return r;
}

//create a sorter that can work with JS objects
var sortByProperty = function(prop) {
    return function(a,b) {
        if (typeof a[prop] == "number") {
            return (a[prop] - b[prop]);
        } else {
            return ((a[prop] < b[prop]) ? -1 : ((a[prop] > b[prop]) ? 1 : 0));
        }
    };
};

/* ============================ START ACTING ==============================*/

//Grab all the different states, everywhere in the data, and get them in an Array
var states = getValues(data,'Province/State');
//clear out the duplicate ones, and sort alphabetically
var uniqueStates = cleanArray(states.filter( onlyUnique )).sort();
//get the compare array prepared
var all_the_States = getValues(usStates,'abbreviation');
//cache the totalnumber of Unique States found
var statesTotal = uniqueStates.length;
//use a starting State value, to start the visualization of the data
var startingState="CA";
//Separate the US Retailers from the Overseas ones, create new arrays as we go
var usArr = new Array(),overseasArr = new Array(), all_the_intersected_states = new Array();

for (var x=0;  x < statesTotal; x++) {
	var state = uniqueStates[x];
	replaceState(state);
	
	if ((outsideUS === true) && (physicalStore === true) && (featured === false)) {
		overseasArr.push({'state':state,'stateLiteral':stateLiteral});
		console.log('Non US store'+state+' stateLiteral '+stateLiteral);
	}
	else if ((outsideUS === false) && (physicalStore === true) && (featured === false)) {
		usArr.push({'state':state,'stateLiteral':stateLiteral});
		//console.log('US store'+state+' stateLiteral'+stateLiteral);
	}
	else{
		// if it is an online, or a Special store
		//console.log('online store'+state+' stateLiteral'+stateLiteral);
	}
}

console.log(overseasArr);
//calculate the number of outerloops for the USA
var usStatesTotal = usArr.length;
//the number we want to group at

var groupdivider = {{ settings.store_locator_links_per_row }};
//calculate the number of outerloops
var thelinksWidth = (100/{{ settings.store_locator_links_per_row }});

var usaStatesOuterloops =  ~~(usStatesTotal/groupdivider);
/*Overseas Calculations */
//calculate the number of outerloops for the Overseas Retailers
var overseasStatesTotal = overseasArr.length;
//calculate the number of outerloops
var overseasStatesOuterloops =  ~~(overseasStatesTotal/groupdivider);
//get a percentual value we can use for making everything look nice :)
var overseasPercentual_divide = (100 / (overseasStatesOuterloops + 1 )).toFixed(2);
//cache the totalnumber of All the States (should be 50+1 for DC (federal) = 51, but maybe Russia will become a US state one day :)
var all_the_statesTotal = all_the_States.length;
//the number we want to group at
var all_states_groupdivider = 13;
//calculate the number of outerloops
var all_usaStatesOuterloops =  ~~(all_the_statesTotal/all_states_groupdivider);
//get a percentual value we can use for making everything look nice :)
var all_usaPercentual_divide = (100 / (all_usaStatesOuterloops + 1 )).toFixed(2);
//Create the Markup Objects for all US Link Outputs 
var all_the_intersected_states = getIntersect(all_the_States, uniqueStates);
//console.log(all_the_intersected_states);

{% if settings.store_locator_use_selectBox == "dropdown" %}
	articleClass = "dropdownStyle";
	output+= '<input id="default-collection-sortby" type="hidden" value="'+startingState.toLowerCase()+'">';
	output+= '<div class="sorter" style="text-align: center;"><label for="sort-by">Select Location: </label>';
	output+= '<select id="sort-by">';
	{% if settings.store_locator_show_Online %}
		//create the links for the Online stores
		output+= '<option value="online">Online Stores</option>';
	{% endif %}
	//create the links for the Overseas Retailers
	{% if settings.store_locator_show_Overseas %}
		{% if settings.store_locator_aggreagate_Overseas %}
			output+= '<option value="international">International Stores</option>';
		{% else %}
			for (var j= 0; j < overseasStatesTotal; j++) {
				overseasState = overseasArr[j].state;
				overseasStateLiteral = overseasArr[j].stateLiteral;
				output+= '<option value="'+overseasState.toLowerCase().replace(/\s+/g, '')+'">'+overseasStateLiteral+'</option>';
			}
		{% endif %}
	{% endif %}

	{% if settings.store_locator_show_Special %}
		output+= '<option value="special">Special Retailers</option>';
	{% endif %}

	
	//create the links for the US
	for (var j= 0; j < usStatesTotal; j++) {
	    usState = usArr[j].state;
	    usStateLiteral = usArr[j].stateLiteral;
	    output+= '<option value="'+usState.toLowerCase().replace(/\s+/g, '')+'">'+usStateLiteral+'</option>';
	}
	output+= '</select>';
	output+= '</div>';   
{% elsif settings.store_locator_use_selectBox == "links" %}
	articleClass = "linksStyle";
	//creating the menu links 
	output+= '<div class="menu-items-wrapper"><div class="menu-items container"><div class="inner clearfix">';
	//create the links for the US
	output+= '<div class="menu-item-holder US-retailers">';
	output+= '<div class="findus in-us">United States</div>';
	outerloop:
    	for (var i=0; i <= usaStatesOuterloops; i++) { //Runs 1 time every 8 states, 2 times for 16 states found ... 
    		output+= '<ul class="separator">';
      		for (var j= groupdivider*i; j < groupdivider*i+groupdivider; j++) {
      			//making sure we're not returning undefined.		
      			if ( j === usStatesTotal) {
					break outerloop;
        		}
        		usState = usArr[j].state;
        		usStateLiteral = usArr[j].stateLiteral;
        		if (usState === startingState) { var activeclass = " active";	}else { var activeclass = "";}
				output+= '<li><a class="togglers'+activeclass+'" id="state-'+usState+'" data-collapse="true" data-collapse-el="#'+usState.toLowerCase().replace(/\s+/g, '')+'" data-id="'+usState.toLowerCase()+'">'+usStateLiteral+'</a></li>';
      		}
      		output+= '</ul>';
    	}
	output+= '</div>';

	{% if settings.store_locator_show_Overseas %}
		var overseas_shown = "x";
	{% else %}
		var overseas_shown = "o";
	{% endif %}

	{% if settings.store_locator_show_Online %}
		var online_shown = "x";
	{% else %}
		var online_shown = "o";
	{% endif %}

	{% if settings.store_locator_show_Special %}
		var special_shown = "x";
	{% else %}
		var special_shown = "o";
	{% endif %}


	output+= '<div class="additional_hold '+overseas_shown+online_shown+special_shown+'">';
	//End of US retailers
	{% if settings.store_locator_show_Overseas %}
		//create the links for the Overseas Retailers
		output+= '<div class="menu-item-holder overseas-retailers">';
		output+= '<div class="findus in-overseas">Overseas</div>';
		outerloop:
    		for (var i=0; i <= overseasStatesOuterloops; i++) { //Runs 1 time every 8 states, 2 times for 16 states found ... 
    			output+= '<ul class="separator">';
    	  		for (var j= groupdivider*i; j < groupdivider*i+groupdivider; j++) {
    	  			//making sure we're not returning undefined. 
    	  			if ( j === overseasStatesTotal) {
					break outerloop;
        			}
        			overseasState = overseasArr[j].state;
        			overseasStateLiteral = overseasArr[j].stateLiteral;
        			if (overseasState === startingState) { var data_collapse = "false";	}else { var data_collapse = "true"; }
					output+= '<li><a class="togglers" id="state-'+overseasState+'" data-collapse="true" data-collapse-el="#'+overseasState.toLowerCase().replace(/\s+/g, '')+'" data-id="'+overseasState.toLowerCase()+'">'+overseasStateLiteral+'</a></li>';
      			}
      			output+= '</ul>';
    		}
		output+= '</div>';
	//End of overseas retailers
	{% endif %}

	{% if settings.store_locator_show_Online %}
		//create the links for the Online Retailers
		output+= '<div class="menu-item-holder online-retailers">';
		output+= '<div class="findus in-online">Online</div>';
		output+= '<ul class="separator" style = "width:100%;">';
		output+= '<li id="onlineStateHolder"><a class="togglers" id="state-online" data-collapse="true" data-collapse-el="#online" data-id="online">All Online Stores</a></li>';
		output+= '</ul>';
		output+= '</div>';
	{% endif %}


	{% if settings.store_locator_show_Special %}
		//create the links for the Online Retailers
		output+= '<div class="menu-item-holder special-retailers">';
		output+= '<div class="findus in-online">Special Retailers</div>';
		output+= '<ul class="separator" style = "width:100%;">';
		output+= '<li id="specialStateHolder"><a class="togglers" id="state-online" data-collapse="true" data-collapse-el="#special" data-id="special">Show our Special Retailers</a></li>';
		output+= '</ul>';
		output+= '</div>';
	{% endif %}


	
output+= '</div>';
output+= '</div></div></div>';

{% else %}
	articleClass = "nomenuStyle";
{% endif %}

//create the databoxes

output+= '<article class="container '+ articleClass +'">';
{% if settings.store_locator_use_selectBox == "none" %}
output+= '<div class="fullspan"><h2 class="regionheading">United States</h2></div>';
{% endif %}
output+= '<div class="inner clearfix masonry-ready">';
//output+= '<div class="grid-sizer"></div>';


{% if settings.store_locator_use_selectBox == "dropdown" %}
	{% if settings.store_locator_aggreagate_Overseas %}
		output+= '<div class="collapse-item anim-height" id="international"><div class="collapse-wrap"><div class="collapse-content">';
		output+= '<div id="nonUSphysical"></div>';
		output+= '</div></div></div>';
	{% endif %}
{% endif %}

for (var x=0;  x < statesTotal; x++) {
	var state = uniqueStates[x];
	//get all the objects that contain those unique states
	var retailersByState = getObjects(data,'Province/State',state);
	//sort the Objects
	retailersByState.sort(sortByProperty("Name"));
	replaceState(state);

	if ((outsideUS === true) && (physicalStore === true) && (featured === false)) {
		var domChange = "domchange-outsider"; 
		{% if settings.store_locator_use_selectBox == "dropdown" %}
			{% if settings.store_locator_aggreagate_Overseas %}
				var domRemoval = "removeFromDom";
			{% else %}
				var domRemoval = " ";
			{% endif %}
		{% endif %}
	}
	else if ((outsideUS === false) && (physicalStore === true) && (featured === false) ) {
		var domChange = "no-domchange";var domRemoval = " ";
	}
	else{
		if (featured === false){
			var domChange = "onlinewrapped";var domRemoval = " ";
		}
		else{
			var domChange = "featuredwrapped";var domRemoval = " ";
		}
	}

	{% unless settings.store_locator_use_selectBox == "none" %}
		if (state === startingState) { var openState = " open";	} else { var openState ="";}
		output+= '<div class="collapse-item '+domRemoval+' anim-height'+openState+'" id="'+state.toLowerCase().replace(/\s+/g, '')+'">';
		output+= '<div class="collapse-wrap"><div class="collapse-content">';
		{% if settings.store_locator_use_selectBox == "dropdown" %}
			{% if settings.store_locator_aggreagate_Overseas %}
				var domRemoval = "removeFromDom";
				output+= '<div class="aggregatorhold '+domChange+'">';
			{% endif %}
		{% endif %}
	{% endunless %}

	{% if settings.store_locator_use_selectBox == "none" %}
		//different output for online stores, we need one more div to store those ones under
		if ((outsideUS === true) && (physicalStore === false) && (featured === false)) {
			output+= '<div id="'+domChange+'" data-state="'+state.toLowerCase().replace(/\s+/g, '')+'">';
		}
		else if ((outsideUS === true) && (physicalStore === false) && (featured === true)) {
			output+= '<div id="'+domChange+'" data-state="'+state.toLowerCase().replace(/\s+/g, '')+'">';
		}
		else {
			output+= '<div class="simple-list '+domChange+'" data-state="'+state.toLowerCase().replace(/\s+/g, '')+'">';
		}
		output+= '<div class="no-collapse"><div class="no-collapse-content">';
	{% endif %}
  	
	output+= '<div class="statehead"><h2 class="thestate">'+stateLiteral+'</h2></div>';
	for (var i=0,  tot=retailersByState.length; i < tot; i++) {
    	//console.log("PAIR " + i + ": " + retailersByState[i].Name);
    	var name 		= retailersByState[i]["Name"];
		var address 	= retailersByState[i]["Address"];
		var address2 	= retailersByState[i]["Address 2"];
		var city 		= retailersByState[i]["City"];
		//var thestate	= retailersByState[i]["Province/State"];
		var country 	= retailersByState[i]["Country"];
		var zip 		= retailersByState[i]["Postal/Zip Code"];
		var phone 		= retailersByState[i]["Phone"];
		//var fax 		= retailersByState[i]["Fax"];
		//var email 		= retailersByState[i]["Email"];
		var website 	= retailersByState[i]["Website"];
		//var hrs 		= retailersByState[i]["Hours"];
		var lat 		= retailersByState[i]["Latitude"];
		var lng 		= retailersByState[i]["Longitude"];
		//var store 		= retailersByState[i]["Store Group"];
		if ((outsideUS === true) && (physicalStore === true) && (featured === false)) { 
			var thestate = retailersByState[i]["Province/State"]; var whereIntheWorld = "overseas"; var retailClass="retailers_info";
		} 
		else if ((outsideUS === false) && (physicalStore === true) && (featured === false)) {
			var thestate = country; var whereIntheWorld = "usa"; var retailClass="retailers_info";
		}
		else { 
			if (featured === false){
				var thestate = country; var whereIntheWorld = "onlinestores domchange-online retailers_info"; var retailClass="onlineClass";
			}
			else{
				var thestate = country; var whereIntheWorld = "featuredstores domchange-featured retailers_info"; var retailClass="onlineClass";
			}
		}

 		output+= '<div class="times-'+tot+' '+retailClass+' '+whereIntheWorld+'"><ul>';
			
		if (website !=="") {
			output+='<li class="name_with_link"><a class="webres" target="_blank" href="'+website+'">'+name+'</a></li>';
		} else {
			output+='<li class="just_the_name">' + name + '</li>';
		}
		if (address !=="") {
		output+='<li>' + address + '</li>';
		}
		if (address2 !=="") {
			output+='<li>' + address2 + '</li>';
		}
		if (city !=="") {
			output+='<li>' + city + ', ' + thestate +' '+ zip + '</li>';
		}
		if (phone !=="") {
			output+='<li>' +phone + '</li>';
		}
		/*if (website !=="") {
			output+='<li style="word-wrap: break-word;">' + website +'</li>';
		}
		*/
		//output+='<li class="getdir"><a target="_blank" title="get directions to '+name+'" href="https://www.google.com/maps/dir/Current+Location/'+address+ ' '+ city + ' , ' + thestate +' '+ zip+'">get directions</a></li>';
		output+='</ul></div>';
	}
	output+= '</div></div></div>';
	{% if settings.store_locator_use_selectBox == "dropdown" %}
		{% if settings.store_locator_aggreagate_Overseas %}
			output+= '</div>';
		{% endif %}
	{% endif %}
}
output+= '</div></article>';

//Create the necessary Placeholders for the rest of the Divisions
{% if settings.store_locator_use_selectBox == "none" %}
	
	{% if settings.store_locator_show_Overseas %}
		output+= '<article class="container '+ articleClass +'">';
		output+= '<div class="fullspan">';
		var theh2Title = "International";
		var theIDholder = "nonUSphysical";
		output+= '<h2 class="regionheading">'+theh2Title+'</h2></div><div id="'+theIDholder+'" class="inner clearfix masonry-ready">';
		//output+= '<div class="grid-sizer"></div>';
		output+= '</div></article>';	
	{% endif %}

	{% if settings.store_locator_show_Online %}
		var theh2Title = "Online";
		var theIDholder = "onlineStores";
		output+= '<article class="container '+ articleClass +'">';
		output+= '<div class="fullspan">';
		output+= '<h2 class="regionheading">'+theh2Title+'</h2></div><div id="'+theIDholder+'" class="inner clearfix masonry-ready">';
		//output+= '<div class="grid-sizer"></div>';
		output+= '</div></article>';
	{% endif %}

	{% if settings.store_locator_show_Special %}
		var theh2Title = "Special Retailers";
		var theIDholder = "specialStores";
		output+= '<article class="container '+ articleClass +'">';
		output+= '<div class="fullspan">';
		output+= '<h2 class="regionheading">'+theh2Title+'</h2></div><div id="'+theIDholder+'" class="inner clearfix masonry-ready">';
		//output+= '<div class="grid-sizer"></div>';
		output+= '</div></article>';
	{% endif %}
	
{% endif %}

document.getElementById("retailers_placeholder").innerHTML=output;

{% if settings.store_locator_use_selectBox == "dropdown" %}

	{% if settings.store_locator_show_Overseas %}
		var physicalNonUS = $( '.domchange-outsider' );
		var physicalNonUSPlacehold = $( '#nonUSphysical');
		var physicalNonUSRemoved = $('.removeFromDom');
		
		{% if settings.store_locator_aggreagate_Overseas %}
			physicalNonUS.detach();
			physicalNonUSPlacehold.append( physicalNonUS );
		{% endif %}
			physicalNonUSRemoved.remove();
	{% endif %}
	//Use jquery for toggling 
	$(document).ready(function() {InitSorter();});
	var InitSorter = function(){
		var sortElement = $('#sort-by');
		sortElement
			.val($('#default-collection-sortby').val())
			.bind('change', function() {
				var closeBtn = ($(this).attr('data-collapse') == 'false') ? true : false;
				var collapseEl = '#'+$(this).val();
				var collapseItem = $(collapseEl);
				//Open Accordion
				var toggleCollapse = function(item, type) {
					if(type == 'close')	{
						item
							.removeClass('open')
							.height(0);
					} 
					else {
            			item
              				.height(item.find('.collapse-wrap').height())
              				.addClass('open');
          			}      
        		};
	        	//Toggle View
        		if(collapseItem.is('.open')) {
          			var itemToClose = collapseItem;
          			if(itemToClose)toggleCollapse(itemToClose, 'close');
        		} 
        		else {
          			if(collapseItem.parents().find('.open').length){
            			toggleCollapse($('.collapse-item.open'), 'close');
            			setTimeout(function(){
              				toggleCollapse(collapseItem, 'open');
            			}, 350);
          			} 
          			else {
            			toggleCollapse(collapseItem, 'open');
          			}
        		}
  			});
			sortElement.addClass('hidden');
			var selectBox = new SelectBox({
    			selectbox:sortElement,
    			changeCallback:function(value){
      				sortElement.trigger('change');
    			}
  			});
		};


{% elsif settings.store_locator_use_selectBox == "links" %}
	$(document).ready(function() {
		$('a[data-collapse]').on('click', function(){
        	var btn = $(this),
        	togglers = $('a.togglers'),
            closeBtn = (btn.attr('data-collapse') == 'false') ? true : false;
            collapseEl = btn.attr('data-collapse-el'),
            collapseItem = $(collapseEl);
	        //Open Accordion
        	var toggleCollapse = function(item, type){
          		if(type == 'close'){
            		item
              			.removeClass('open')
              			.height(0);
		        		//console.log('closing');
          		} 
          		else {
            		item
              		.height(item.find('.collapse-wrap').height())
              		.addClass('open');
        			//console.log('opening');
		        }      
        	};
        	//Toggle View
        	if(collapseItem.is('.open') || closeBtn){
        		var itemToClose = (closeBtn) ? $(btn.attr('data-collapse-section')).find('.collapse-item.open') : collapseItem;
          		if(itemToClose)toggleCollapse(itemToClose, 'close');
        	}
        	else {
          		if(collapseItem.parents().find('.open').length){
          		//console.log('different panel opening');
          		togglers.removeClass('active');
        		btn.addClass('active');
        		//btn.attr('data-collapse', 'true');
            	toggleCollapse($('.collapse-item.open'), 'close');
            	setTimeout(function(){
              		toggleCollapse(collapseItem, 'open');
            	}, 350);
          		}
          		else {
            		toggleCollapse(collapseItem, 'open');
             		//console.log('already open else');
             		//btn.attr('data-collapse', 'false');
             		togglers.removeClass('active');
        	 		btn.addClass('active');
		        }
        	}
      	});
	});
{% else %}


var physicalNonUS = $( '.domchange-outsider' );

{% if settings.store_locator_show_Overseas %}
	var physicalNonUSPlacehold = $( '#nonUSphysical');
	physicalNonUS.detach();
	physicalNonUSPlacehold.append( physicalNonUS );
{% else %}
	physicalNonUS.remove();
{% endif %}

var nonPhysicalHead = $('#onlinewrapped');
var nonPhysical = $( '.domchange-online' );
var nonPhysicalPlacehold = $( '#onlineStores');
{% if settings.store_locator_show_Online %}
	nonPhysical.addClass('simple-list').detach();
	nonPhysicalPlacehold.append( nonPhysical );
{% endif %}
nonPhysicalHead.remove();

var featuredHead = $('#featuredwrapped');
var featuredStore = $( '.domchange-featured' );
var featuredPlacehold = $( '#specialStores');
{% if settings.store_locator_show_Special %}
	featuredStore.addClass('simple-list').detach();
	featuredPlacehold.append( featuredStore );
{% endif %}
featuredHead.remove();

$(document).ready(function() {

	$('.masonry-ready')  	// initialize Masonry
  	.masonry({
  		gutter:20,
  		itemSelector:'.simple-list'
  	})
  	// now okay to use methods
  	.masonry('reloadItems')
  	.masonry('bindResize');
	
});

{% endif %}
</script>